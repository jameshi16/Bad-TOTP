#ifndef TEST_HMAC_SHA256
#define TEST_HMAC_SHA256

#include "../sha256.h"
#include "../hmac.h"

#include <stdlib.h>
#include <stdio.h>
#include <string.h>

int test_hmac_sha256_helper(const void* msg, size_t size, const void* key, size_t keySize, const char* expected) {
  printf("Message: %s\n", (const char*) msg);
  printf("Expected: %s\n", expected);

  uint8_t* data = hmac(msg, size, key, keySize, (void* (*) (const void*, size_t)) sha256, 64, 32);
  char result[64];
  for (int i = 0; i < 32; i++) {
    sprintf(result + i * 2, "%02x", data[i]);
  }
  printf("Actual:   %s\n", result);

  int compareResult = strcmp(result, expected);
  compareResult ? printf("Failed\n\n") : printf("Passed\n\n");
  free(data);
  return compareResult;
}

int test_hmac_sha256() {
  const char key1[] = "Jefe";
  const char key2[] = {
    0x0b, 0x0b, 0x0b, 0x0b,
    0x0b, 0x0b, 0x0b, 0x0b,
    0x0b, 0x0b, 0x0b, 0x0b,
    0x0b, 0x0b, 0x0b, 0x0b,
    0x0b, 0x0b, 0x0b, 0x0b
  };
  const char key3[] = {
    0x0c, 0x0c, 0x0c, 0x0c,
    0x0c, 0x0c, 0x0c, 0x0c,
    0x0c, 0x0c, 0x0c, 0x0c,
    0x0c, 0x0c, 0x0c, 0x0c,
    0x0c, 0x0c, 0x0c, 0x0c
  };
  const uint8_t key4[] = {
    0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
    0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
    0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
    0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
    0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
    0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
    0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
    0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
    0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
    0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
    0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
    0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
    0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
    0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
    0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
    0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
    0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
    0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
    0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
    0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
    0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
    0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
    0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
    0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
    0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
    0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
    0xaa
  };
  const char message1[] = "what do ya want for nothing?";
  const char message2[] = "Hi There";
  const char message3[] = "Test With Truncation";
  const char message4[] = "Test Using Larger Than Block-Size Key - Hash Key First";

  const char result1[] = "5bdcc146bf60754e6a042426089575c75a003f089d2739839dec58b964ec3843";
  const char result2[] = "b0344c61d8db38535ca8afceaf0bf12b881dc200c9833da726e9376c2e32cff7";
  const char result3[] = "a3b6167473100ee06e0c796c2955552bfa6f7c0a6a8aef8b93f860aab0cd20c5";
  const char result4[] = "60e431591ee0b67f0d8a26aacbf5b77f8e0bc6213728c5140546040f0ee37f54";

  int result = 0;

  result += test_hmac_sha256_helper(message1, sizeof(message1) - 1, key1, sizeof(key1) - 1, result1) ? 1 : 0;
  result += test_hmac_sha256_helper(message2, sizeof(message2) - 1, key2, sizeof(key2), result2) ? 1 : 0;
  result += test_hmac_sha256_helper(message3, sizeof(message3) - 1, key3, sizeof(key3), result3) ? 1 : 0;
  result += test_hmac_sha256_helper(message4, sizeof(message4) - 1, key4, sizeof(key4), result4) ? 1 : 0;

  return result;
}

#endif
